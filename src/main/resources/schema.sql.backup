CREATE TYPE FLAG AS ENUM ('ALLERGEN', 'CUISINE', 'GENERAL');
CREATE TYPE RECIPE_DIFFICULTY AS ENUM ('EASY', 'MEDIUM', 'HARD');
CREATE TYPE RECIPE_TIME AS ENUM ('QUICK', 'MEDIUM', 'LONG');
CREATE TYPE SENSOR_TYPE AS ENUM ('TEMPERATURE', 'HUMIDITY', 'BRIGHTNESS');

CREATE TABLE RECIPES
(
    ID           SERIAL PRIMARY KEY,
    NAME         VARCHAR(255) NOT NULL,
    "TIME"       RECIPE_TIME,
    DIFFICULTY   RECIPE_DIFFICULTY,
    DESCRIPTION  TEXT,
    INSTRUCTIONS TEXT,
    IMAGE_PATH   VARCHAR(255)

);

CREATE TABLE INGREDIENTS
(
    ID   SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    IMAGE_PATH VARCHAR(255)
);

CREATE TABLE RECIPE_INGREDIENTS
(
    RECIPE_ID     INTEGER NOT NULL,
    INGREDIENT_ID INTEGER NOT NULL,
    QUANTITY      INTEGER NOT NULL,
    OPTIONAL      BOOLEAN NOT NULL,

    CONSTRAINT FK_RECIPE_ID FOREIGN KEY (RECIPE_ID) REFERENCES RECIPES (ID),
    CONSTRAINT FK_INGREDIENT_ID FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID)
);

CREATE TABLE TAGS
(
    TAG_ID SERIAL PRIMARY KEY,
    FLAG   FLAG NOT NULL,
    NAME   VARCHAR(255)                            NOT NULL
);

CREATE TABLE INGREDIENT_TAGS
(
    INGREDIENT_ID INTEGER,
    TAG_ID        INTEGER,

    CONSTRAINT FK_INGREDIENT_TAG_INGREDIENT_ID FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID),
    CONSTRAINT FK_INGREDIENT_TAG_TAG_ID FOREIGN KEY (TAG_ID) REFERENCES TAGS (TAG_ID)
);

CREATE TABLE RECIPE_TAGS
(
    RECIPE_ID INTEGER,
    TAG_ID    INTEGER,

    CONSTRAINT FK_RECIPE_TAG_RECIPE_ID FOREIGN KEY (RECIPE_ID) REFERENCES RECIPES (ID),
    CONSTRAINT FK_RECIPE_TAG_TAG_ID FOREIGN KEY (TAG_ID) REFERENCES TAGS (TAG_ID)
);

CREATE TABLE END_USERS
(
    ID             SERIAL PRIMARY KEY,
    USERNAME       VARCHAR(255) NOT NULL UNIQUE,
    EMAIL          VARCHAR(255) NOT NULL UNIQUE,
    PASSWORD       VARCHAR(255) NOT NULL,
    FIRST_NAME     VARCHAR(255),
    LAST_NAME      VARCHAR(255),
    CITY           VARCHAR(255),
    STATE_REGION   VARCHAR(255),
    "zip"          VARCHAR(255),
    COUNTRY        VARCHAR(255),
    CURRENT_RECIPE INTEGER      NOT NULL
);

CREATE TABLE PANTRY_ZONES
(
    ID         SERIAL PRIMARY KEY,
    USER_ID    INTEGER      NOT NULL,
    NAME       VARCHAR(255) NOT NULL,
    SENSOR_BOX_CODE   VARCHAR(255) NOT NULL,
    MIN_TEMP   INTEGER      NOT NULL,
    MAX_TEMP   INTEGER      NOT NULL,
    MIN_HUM    INTEGER      NOT NULL,
    MAX_HUM    INTEGER      NOT NULL,
    MIN_BRIGHT INTEGER      NOT NULL,
    MAX_BRIGHT INTEGER      NOT NULL,

    CONSTRAINT FK_PANTRY_USER_ID FOREIGN KEY (USER_ID) REFERENCES END_USERS (ID)
);

CREATE TABLE SENSOR_DATA
(
    ID             SERIAL PRIMARY KEY,
    PANTRY_ZONE_ID INTEGER NOT NULL,
    TIME_STAMP     TIMESTAMP,
    SENSOR_VALUE   INTEGER NOT NULL,
    SENSOR_TYPE    VARCHAR(255) NOT NULL,

    CONSTRAINT FK_PANTRY_ID FOREIGN KEY (PANTRY_ZONE_ID) REFERENCES PANTRY_ZONES (ID)
);

CREATE TABLE USER_PREFERENCES
(
    USER_ID INTEGER NOT NULL,
    TAG_ID  INTEGER NOT NULL,
    LIKES  BOOLEAN NOT NULL,

    CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES END_USERS (ID),
    CONSTRAINT FK_TAG_ID FOREIGN KEY (TAG_ID) REFERENCES TAGS (TAG_ID)
);


CREATE TABLE PRODUCTS
(
    ID            SERIAL PRIMARY KEY,
    INGREDIENT_ID INTEGER      NOT NULL,
    PRODUCT_NAME  VARCHAR(255) NOT NULL,
    CODE          VARCHAR(255) NOT NULL UNIQUE,
    SIZE          INTEGER      NOT NULL,

    CONSTRAINT FK_ITEM_INGREDIENT_ID FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID)
);

CREATE TABLE PANTRY_ZONE_PRODUCTS
(
    PRODUCT_ID     INTEGER NOT NULL,
    PANTRY_ZONE_ID INTEGER NOT NULL,
    QUANTITY       INTEGER NOT NULL,
    AMOUNT_USED    INTEGER NOT NULL,
    DATE_ENTERED   DATE,

    CONSTRAINT FK_PANTRY_ZONE_ITEM_ID FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID),
    CONSTRAINT FK_PANTRY_ZONE_INGREDIENT_PANTRY_ID FOREIGN KEY (PANTRY_ZONE_ID) REFERENCES PANTRY_ZONES (ID)
);

CREATE TABLE SHOPPING_LISTS
(
    ID      SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,

    CONSTRAINT FK_USER_SHOPPING_LIST FOREIGN KEY (USER_ID) REFERENCES END_USERS (ID)
);

CREATE TABLE SHOPPING_LIST_INGREDIENTS
(
    SHOPPING_LIST_ID INTEGER NOT NULL,
    INGREDIENT_ID    INTEGER NOT NULL,
    AMOUNT           INTEGER NOT NULL,

    CONSTRAINT FK_SHOPPING_LIST_INGREDIENT FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID),
    CONSTRAINT FK_SHOPPING_LIST FOREIGN KEY (SHOPPING_LIST_ID) REFERENCES SHOPPING_LISTS (ID)
);

/* drop all tables, types and sequences

DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = current_schema()) LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$;

DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT relname FROM pg_class where relkind = 'S') LOOP
        EXECUTE 'DROP SEQUENCE IF EXISTS ' || quote_ident(r.relname) || ' CASCADE';
    END LOOP;
END $$;

DELETE FROM pg_type WHERE typnamespace=17548
*/